// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider  = "postgresql"
  url       = env("POSTGRESS_URI")
  directUrl = env("POSTGRESS_DIRECT_URI")
}

model User {
  id                Int            @id @default(autoincrement())
  email             String         @unique
  name              String?
  password          String
  subaccount_id     String?
  subaccount_key    String?
  verificationToken String?
  status            Boolean        @default(false)
  contacts          Contact[] // Define one-to-many relationship
  agents            Agent[] // Define one-to-many relationship
  groups            ContactGroup[] // Define one-to-many relationship
  ghlToken          String?
  ghlCalenderId     String?
  timezone          String         @default("UTC")
  appointments      Appointments[] // Define one-to-many relationship
}

model Appointments {
  id           Int      @id @default(autoincrement())
  name         String?
  email        String
  phone_number String?
  status       String
  meeting_link String?
  startTime    DateTime
  endTime      DateTime
  user         User     @relation(fields: [userId], references: [id]) // Relation to User
  userId       Int
}

model ContactGroup {
  id       Int       @id @default(autoincrement())
  name     String
  user     User      @relation(fields: [userId], references: [id]) // Establish relation
  userId   Int
  contacts Contact[]
}

model Contact {
  id           Int          @id @default(autoincrement())
  name         String?
  number       String
  user         User         @relation(fields: [userId], references: [id]) // Establish relation
  userId       Int
  contactGroup ContactGroup @relation(fields: [groupId], references: [id]) // Establish relation
  groupId      Int
}

model Agent {
  id              Int     @id @default(autoincrement())
  name            String?
  agentType       String?
  voice           String
  prompt          String
  numberId        String?
  firstSentence   String?
  waitForGreeting String  @default("false")
  maxDuration     Int?    @default(1)
  transferNumber  String?
  language        String? @default("ENG")
  model           String? @default("enhanced")
  user            User    @relation(fields: [userId], references: [id]) // Establish relation
  userId          Int
  tools           String?
}
